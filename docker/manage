#!/bin/bash
export MSYS_NO_PATHCONV=1
# getDockerHost; for details refer to https://github.com/bcgov/DITP-DevOps/tree/main/code/snippets#getdockerhost
. /dev/stdin <<<"$(cat <(curl -s --raw https://raw.githubusercontent.com/bcgov/DITP-DevOps/main/code/snippets/getDockerHost))" 
export DOCKERHOST=$(getDockerHost)
set -e

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# ========================================================================================================
# Check Docker Compose
# --------------------------------------------------------------------------------------------------------

# Default to deprecated V1 'docker-compose'.
dockerCompose="docker-compose --log-level ERROR --build"

# Prefer 'docker compose' V2 if available
if [[ $(docker compose version 2> /dev/null) == 'Docker Compose'* ]]; then
  dockerCompose="docker --log-level error compose"
fi


# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF
      Usage: $0 [command] [options]
      Commands:
      build               - Build the endorser docker images
      start | up          - Run endorser service
      start-bdd | up-bdd  - Run endorser service and author agents (to support testing)
      run-bdd             - Run BDD tests (behave runs locally not in docker)
      run-bdd-docker      - Run BDD tests (using a docker image)
      logs                - To tail the logs of running containers (ctrl-c to exit).
      stop | down         - Stop endorser
      rm                  - Stop endorser and remove volumes
EOF
  exit 1
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

exportEnvironment() {
  for arg in "$@"; do
    case "$arg" in
      *=*)
        export "${arg}"
        ;;
      --logs)
        TAIL_LOGS=1
        ;;
      *)
        # If not recognized, save it for later procesing ...
        set -- "$@" "$arg"
        ;;
    esac
  done

  # global
  export ENDORSER_ENV=${ENDORSER_ENV:-local}
  export WEB_CONCURRENCY=2

  # endorser configuration
  export ENDORSER_AUTO_ACCEPT_CONNECTIONS=${ENDORSER_AUTO_ACCEPT_CONNECTIONS:-false}
  export ENDORSER_AUTO_ACCEPT_AUTHORS=${ENDORSER_AUTO_ACCEPT_AUTHORS:-false}
  export ENDORSER_AUTO_ENDORSE_REQUESTS=${ENDORSER_AUTO_ENDORSE_REQUESTS:-false}
  export ENDORSER_AUTO_ENDORSE_TXN_TYPES=${ENDORSER_AUTO_ENDORSE_TXN_TYPES}
  export ENDORSER_REJECT_BY_DEFAULT=${ENDORSER_REJECT_BY_DEFAULT:-false}
  export ENDORSER_PUBLIC_NAME=${ENDORSER_PUBLIC_NAME:-"Demo Endorser"}
  export ENDORSER_PUBLIC_DESC=${ENDORSER_PUBLIC_DESC:-"An endorser service for aca-py wallets"}

  # ngrok
  export NGROK_ENDORSER_AGENT_PORT=4040
  export NGROK_ENDORSER_AGENT_PORT_EXPOSED=4057

  # endorser aca-py agent
  # export LEDGER_URL=${LEDGER_URL-http://test.bcovrin.vonx.io}
  export LEDGER_URL=${LEDGER_URL-http://${DOCKERHOST}:9000}
  export GENESIS_URL=${GENESIS_URL-${LEDGER_URL}/genesis}
  export TAILS_SERVER_URL=${TAILS_SERVER_URL-http://${DOCKERHOST}:6543}
  export LOG_LEVEL=${LOG_LEVEL-INFO}
  export API_LOG_LEVEL=${API_LOG_LEVEL-DEBUG}
  if [ -z "${ENDORSER_SEED}" ]; then
    # generate a random seed unless one is provided
    export ENDORSER_SEED="$(echo $RANDOM | md5sum | head -c 32; echo;)"
  fi
  export CADDY_AGENT_PORT=2015
  export CADDY_AGENT_ADMIN_PORT=2016
  export CADDY_HOST=aries-endorser-proxy
  export ACAPY_AGENT_HOST=aries-endorser-agent
  export CADDY_ADMIN_PORT=2019
  export ACAPY_HTTP_PORT=8050
  export ACAPY_HTTP_PORT_EXPOSED=8050
  export ACAPY_WS_PORT=8052
  export ACAPY_WS_PORT_EXPOSED=8052
  export ACAPY_ADMIN_PORT=8051
  export ACAPY_ADMIN_PORT_EXPOSED=8051
  export ACAPY_ENDPOINT=${ACAPY_ENDPOINT-http://${DOCKERHOST}:${ACAPY_HTTP_PORT}}
  export ACAPY_WALLET_DATABASE=endorser_agent_wallet
  export ACAPY_WALLET_ENCRYPTION_KEY=key
  export ACAPY_WALLET_STORAGE_TYPE=postgres_storage
  export AGENT_NAME=${AGENT_NAME:-Endorser}
  export ACAPY_API_ADMIN_KEY=change-me
  if [ ! -z "${ACAPY_API_ADMIN_KEY}" ]; then
    export ACAPY_ADMIN_CONFIG="--admin-api-key ${ACAPY_API_ADMIN_KEY}"
  else
    export ACAPY_ADMIN_CONFIG=--admin-insecure-mode
  fi
  export ENDORSER_ACAPY_ADMIN_URL=http://${DOCKERHOST}:${ACAPY_ADMIN_PORT}

  # endorser agent db
  export WALLET_POSTGRESQL_HOST=aries-endorser-wallet
  export WALLET_POSTGRESQL_USER=postgres
  export WALLET_POSTGRESQL_PASSWORD=password
  export WALLET_POSTGRESQL_PORT=5432
  export WALLET_POSTGRESQL_PORT_EXPOSED=5466

  # endorser api
  export ENDORSER_SERVICE_PORT=5000
  export ENDORSER_SERVICE_PORT_EXPOSED=5050
  export ENDORSER_SERVICE_HOST=aries-endorser-api
  export ACAPY_WEBHOOK_URL_API_KEY=change-me
  export ENDORSER_SERVICE_BASE_URL="http://localhost:${ENDORSER_SERVICE_PORT_EXPOSED}"
  export ENDORSER_WEBHOOK_URL="http://${ENDORSER_SERVICE_HOST}:${ENDORSER_SERVICE_PORT}/webhook#${ACAPY_WEBHOOK_URL_API_KEY}"
  export ENDORSER_API_ADMIN_USER=endorser-admin
  export ENDORSER_API_ADMIN_KEY=change-me

  # endorser api db
  export POSTGRESQL_USER=postgres
  export POSTGRESQL_PASSWORD=password
  export CONTROLLER_POSTGRESQL_HOST=aries-endorser-api-db
  export CONTROLLER_POSTGRESQL_USER=endorseruser
  export CONTROLLER_POSTGRESQL_PASSWORD=endorserPass
  export CONTROLLER_POSTGRESQL_ADMIN_USER=endorseradminuser
  export CONTROLLER_POSTGRESQL_ADMIN_PASSWORD=endorseradminPass
  export CONTROLLER_POSTGRESQL_PORT=5432
  export CONTROLLER_POSTGRESQL_PORT_EXPOSED=5467
  export CONTROLLER_POSTGRESQL_DB=endorser_controller_db

  # author aca-py agent
  export ACAPY_AUTHOR_TRANSPORT=${ACAPY_AUTHOR_TRANSPORT-http}
  export ACAPY_AUTHOR_HTTP_PORT=8060
  export ACAPY_AUTHOR_HTTP_PORT_EXPOSED=8060
  export ACAPY_AUTHOR_ADMIN_PORT=8061
  export ACAPY_AUTHOR_ADMIN_PORT_EXPOSED=8061
  export ACAPY_AUTHOR_JWT_SECRET="very_secret_secret"
  export ACAPY_AUTHOR_BASE_URL="http://localhost:${ACAPY_AUTHOR_ADMIN_PORT_EXPOSED}"
  export ACAPY_AUTHOR_ENDPOINT=${ACAPY_AUTHOR_ENDPOINT-http://${DOCKERHOST}:${ACAPY_AUTHOR_HTTP_PORT}}
  export ACAPY_AUTHOR_WALLET_DATABASE=author_agent_wallet
  export ACAPY_AUTHOR_WALLET_ENCRYPTION_KEY=key
  export ACAPY_AUTHOR_WALLET_STORAGE_TYPE=postgres_storage
  export AUTHOR_AGENT_NAME=Author
  export AUTHOR_ENDORSER_AlIAS=endorser
  export ACAPY_AUTHOR_API_ADMIN_KEY=change-me
  if [ ! -z "${ACAPY_AUTHOR_API_ADMIN_KEY}" ]; then
    export ACAPY_AUTHOR_ADMIN_CONFIG="--admin-api-key ${ACAPY_AUTHOR_API_ADMIN_KEY}"
  else
    export ACAPY_AUTHOR_ADMIN_CONFIG=--admin-insecure-mode
  fi
  export AUTHOR_ACAPY_ADMIN_URL=http://${DOCKERHOST}:${ACAPY_AUTHOR_ADMIN_PORT}

  # author agent db
  export AUTHOR_WALLET_POSTGRESQL_HOST=aries-author-wallet
  export AUTHOR_WALLET_POSTGRESQL_USER=postgres
  export AUTHOR_WALLET_POSTGRESQL_PASSWORD=password
  export AUTHOR_POSTGRESQL_PORT=5432
  export AUTHOR_POSTGRESQL_PORT_EXPOSED=5468
}

function logs() {
  (
    local OPTIND
    local unset _force
    local unset no_tail
    while getopts ":f-:" FLAG; do
      case $FLAG in
        f ) local _force=1 ;;
        - ) 
            case ${OPTARG} in
                "no-tail"*) no_tail=1
              ;;
            esac
      esac
    done
    shift $((OPTIND-1))

    log_args=()
    (( no_tail != 1 )) && log_args+=( '-f' )
    if [ ! -z "${TAIL_LOGS}" ] || [ ! -z "${_force}" ]; then
      ${dockerCompose} \
        logs "${log_args[@]}" "$@"
    fi
  )
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  ${dockerCompose} down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi
}

# =================================================================================================================
DEFAULT_CONTAINERS="aries-endorser-proxy ngrok-endorser-agent aries-endorser-agent aries-endorser-wallet aries-endorser-api aries-endorser-api-db"
TEST_CONTAINERS="aries-author-agent aries-author-wallet"

pushd "${SCRIPT_HOME}" >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

case "${COMMAND}" in
build)
  exportEnvironment "$@"
  ${dockerCompose} build $@
  ;;
start|up)
  exportEnvironment "$@"
  ${dockerCompose} up -d ${DEFAULT_CONTAINERS}
  logs
  echo "Run './manage logs' for logs" 
  ;;
start-bdd|up-bdd)
  exportEnvironment "$@"
  ${dockerCompose} up -d ${DEFAULT_CONTAINERS} ${TEST_CONTAINERS}
  logs
  echo "Run './manage logs' for logs" 
  ;;
run-bdd)
  exportEnvironment "$@"
  cd ../bdd-tests
  behave $@
  ;;
run-bdd-docker)
  exportEnvironment "$@"
  ${dockerCompose} run --name bdd --rm bdd-tests $@
  ;;
logs)
  exportEnvironment "$@"
  ${dockerCompose} logs -f
  ;;
stop)
  exportEnvironment "$@"
  ${dockerCompose} stop
  ;;
down|rm)
  exportEnvironment "$@"
  deleteVolumes
  ;;
*)
  usage
  ;;
esac

popd >/dev/null
